#!/usr/bin/env bash

# Path: Shell/applets/.feature-flags
# Purpose: Generic feature flag system for shell scripts
# Version: 2.0.0

# ---------------------------------------------------
# Configuration
# ---------------------------------------------------
FEATURE_CONFIG_FILE="${HOME}/.feature-flags-config"
FEATURE_DEFAULT_TTL=86400  # 1 day in seconds
FEATURE_DEV_LOCAL_OVERRIDE="${HOME}/.feature-flags-dev-flags.json"
FEATURE_DEFAULT_ENV="production" # Default environment
FEATURE_FLAGS_CACHE_DIR="${HOME}/.cache/feature-flags"
FEATURE_FLAGS_CACHE_FILE="${FEATURE_FLAGS_CACHE_DIR}/feature_flags.json"
FEATURE_FLAGS_URL="http://localhost:4000/flags/test01.json"
FEATURE_SYNC_BEHAVIOR="auto" # Can be "auto", "manual", or "local-only"
FEATURE_TEST_LOCAL_OVERRIDE="${HOME}/.feature-flags-test-flags.json"

# Create cache directory if it doesn't exist
mkdir -p "${FEATURE_FLAGS_CACHE_DIR}"

# Load environment configuration
# shellcheck source=/dev/null
if [ -f "${FEATURE_CONFIG_FILE}" ]; then
    source "${FEATURE_CONFIG_FILE}"
else
    # Create default config if it doesn't exist
    echo "FEATURE_ENVIRONMENT=\"$FEATURE_DEFAULT_ENV\"" > "${FEATURE_CONFIG_FILE}"
    FEATURE_ENVIRONMENT="$FEATURE_DEFAULT_ENV"
fi

# ---------------------------------------------------
# Private Functions
# ---------------------------------------------------

# Get default feature flags when no source is available
# Returns: JSON string with default feature configuration
_feature_get_default_flags() {
    cat <<EOF
{
  "metadata": {
    "version": "0.0.1",
    "generated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "ttl": {
      "development": 1800,
      "testing": 3600,
      "production": 86400
    }
  },
  "development": {},
  "testing": {},
  "production": {}
}
EOF
}

# Determine if flags should be synced from remote
# Based on environment and sync behavior settings
# Returns: "true" if should sync, "false" otherwise
_feature_should_sync_from_remote() {
    # Always sync in production
    if [ "$FEATURE_ENVIRONMENT" = "production" ]; then
        return 0 # true
    fi
    
    # Check sync behavior setting
    if [ "$FEATURE_SYNC_BEHAVIOR" = "local-only" ]; then
        return 1 # false
    fi
    
    if [ "$FEATURE_SYNC_BEHAVIOR" = "manual" ]; then
        # Only sync manually 
        return 1 # false
    fi
    
    # For "auto" behavior, check environment
    if [ "$FEATURE_ENVIRONMENT" = "development" ] || [ "$FEATURE_ENVIRONMENT" = "testing" ]; then
        # Check if local override exists
        if [ "$FEATURE_ENVIRONMENT" = "development" ] && [ -f "$FEATURE_DEV_LOCAL_OVERRIDE" ]; then
            return 1 # false - use local override
        fi
        
        if [ "$FEATURE_ENVIRONMENT" = "testing" ] && [ -f "$FEATURE_TEST_LOCAL_OVERRIDE" ]; then
            return 1 # false - use local override
        fi
        
        # Check if we have a valid cache already
        if [ -f "$FEATURE_FLAGS_CACHE_FILE" ]; then
            return 1 # false - use cache
        fi
    fi
    
    # Default to syncing
    return 0 # true
}

# Fetch feature flags from remote URL or fallback to cache/defaults
# Returns: JSON string with feature configuration
_feature_fetch_feature_flags() {
    local current_time
    current_time=$(date +%s)
    local should_fetch=true
    local ttl=$FEATURE_DEFAULT_TTL
    
    # Check for environment-specific overrides first
    if [ "$FEATURE_ENVIRONMENT" = "development" ] && [ -f "$FEATURE_DEV_LOCAL_OVERRIDE" ]; then
        # Use developer override instead of remote/cache
        cat "$FEATURE_DEV_LOCAL_OVERRIDE"
        return
    fi
    
    if [ "$FEATURE_ENVIRONMENT" = "testing" ] && [ -f "$FEATURE_TEST_LOCAL_OVERRIDE" ]; then
        # Use testing override instead of remote/cache
        cat "$FEATURE_TEST_LOCAL_OVERRIDE"
        return
    fi
    
    # Check if we should try to sync from remote
    if ! _feature_should_sync_from_remote; then
        # Use cache if available
        if [ -f "$FEATURE_FLAGS_CACHE_FILE" ]; then
            cat "$FEATURE_FLAGS_CACHE_FILE"
            return
        fi
    fi
    
    # Check if cache exists and is valid
    if [ -f "$FEATURE_FLAGS_CACHE_FILE" ]; then
        # Read existing file to get TTL
        local cached_json
        cached_json=$(cat "$FEATURE_FLAGS_CACHE_FILE")
        if [ -z "$cached_json" ]; then
            # Cache is empty, fetch new data
            should_fetch=true
        else
            # Cache is valid, check TTL
            should_fetch=false
        fi
        
        # Try to extract environment-specific TTL from the cached file
        if command -v jq &>/dev/null; then
            local env_ttl
            env_ttl=$(echo "$cached_json" | jq -r ".metadata.ttl.$FEATURE_ENVIRONMENT // $FEATURE_DEFAULT_TTL" 2>/dev/null)
            if [[ "$env_ttl" =~ ^[0-9]+$ ]]; then
                ttl=$env_ttl
            fi
        fi
        
        # Check if cache is still valid based on TTL
        local cache_time
        cache_time=$(stat -c %Y "$FEATURE_FLAGS_CACHE_FILE" 2>/dev/null || stat -f %m "$FEATURE_FLAGS_CACHE_FILE" 2>/dev/null)
        
        if [ -n "$cache_time" ]; then
            local age=$((current_time - cache_time))
            if [ $age -lt "$ttl" ]; then
                should_fetch=false
            fi
        fi
    fi
    
    # Fetch new data if needed and allowed
    if [ "$should_fetch" = true ] && _feature_should_sync_from_remote; then
        local new_flags=""
        
        # Try to fetch from website
        if command -v curl &>/dev/null; then
            new_flags=$(curl -s --max-time 3 "$FEATURE_FLAGS_URL" 2>/dev/null)
        elif command -v wget &>/dev/null; then
            new_flags=$(wget -q -O - "$FEATURE_FLAGS_URL" 2>/dev/null)
        fi
        
        # Validate JSON if jq is available
        if [ -n "$new_flags" ] && command -v jq &>/dev/null; then
            if echo "$new_flags" | jq . &>/dev/null; then
                # Valid JSON, update cache
                echo "$new_flags" > "$FEATURE_FLAGS_CACHE_FILE"
                
                # For development and testing, create initial local override if it doesn't exist
                if [ "$FEATURE_ENVIRONMENT" = "development" ] && [ ! -f "$FEATURE_DEV_LOCAL_OVERRIDE" ]; then
                    echo "$new_flags" > "$FEATURE_DEV_LOCAL_OVERRIDE"
                    echo "Created initial developer override at $FEATURE_DEV_LOCAL_OVERRIDE"
                fi
                
                if [ "$FEATURE_ENVIRONMENT" = "testing" ] && [ ! -f "$FEATURE_TEST_LOCAL_OVERRIDE" ]; then
                    echo "$new_flags" > "$FEATURE_TEST_LOCAL_OVERRIDE"
                    echo "Created initial testing override at $FEATURE_TEST_LOCAL_OVERRIDE"
                fi
                
                echo "$new_flags"
                return
            fi
        fi
    fi
    
    # Fetch failed, check for overrides again (redundant check but ensures correct order)
    if [ "$FEATURE_ENVIRONMENT" = "development" ] && [ -f "$FEATURE_DEV_LOCAL_OVERRIDE" ]; then
        cat "$FEATURE_DEV_LOCAL_OVERRIDE"
        return
    fi
    
    if [ "$FEATURE_ENVIRONMENT" = "testing" ] && [ -f "$FEATURE_TEST_LOCAL_OVERRIDE" ]; then
        cat "$FEATURE_TEST_LOCAL_OVERRIDE"
        return
    fi
    
    # Use valid cache if available
    if [ -f "$FEATURE_FLAGS_CACHE_FILE" ]; then
        cat "$FEATURE_FLAGS_CACHE_FILE"
        return
    fi
    
    # No valid cache or override, use defaults
    local default_flags
    default_flags=$(_feature_get_default_flags)
    echo "$default_flags" > "$FEATURE_FLAGS_CACHE_FILE"
    echo "$default_flags"
    return
}

# Check if a specific feature is enabled
# Arguments:
#   $1 - Feature name
#   $2 - Flags JSON
#   $3 - Environment (optional, defaults to FEATURE_ENVIRONMENT)
# Returns: 0 if enabled, 1 if disabled
_feature_is_feature_enabled() {
    local feature_name="$1"
    local flags_json="$2"
    local environment="${3:-$FEATURE_ENVIRONMENT}"
    
    # Fall back to JSON parsing
    if command -v jq &>/dev/null; then
        local enabled
        enabled=$(echo "$flags_json" | jq -r ".$environment.$feature_name // false" 2>/dev/null)
        if [ "$enabled" = "true" ]; then
            return 0  # Feature is enabled
        else
            return 1  # Feature is disabled
        fi
    else
        # Fallback for systems without jq - use grep with some JSON parsing
        local pattern="\"$environment\":[^}]*\"$feature_name\":[^,}]*true"
        if echo "$flags_json" | grep -q "$pattern"; then
            return 0  # Feature is enabled
        else
            return 1  # Feature is disabled
        fi
    fi
}

# Get cached feature flags or fetch them if not yet loaded
# Returns: JSON string with feature configuration
_feature_get_feature_flags() {
    # Only fetch once per session and store in a global variable
    if [ -z "$_FEATURE_FLAGS_JSON" ]; then
        _FEATURE_FLAGS_JSON=$(_feature_fetch_feature_flags)
    fi
    echo "$_FEATURE_FLAGS_JSON"
}

# Initialize the feature flag system
# Fetches flags from web if needed
_feature_initialize() {
    # Check if the cache file exists
    if [ ! -f "$FEATURE_FLAGS_CACHE_FILE" ]; then
        # No cache file - attempt to fetch from web
        echo "No local cache found, attempting to fetch feature flags from web..."
        _FEATURE_FLAGS_JSON=$(_feature_fetch_feature_flags)
    else
        # Cache file exists - check if it's expired
        local current_time
        current_time=$(date +%s)
        local cached_json
        cached_json=$(cat "$FEATURE_FLAGS_CACHE_FILE")
        local ttl=$FEATURE_DEFAULT_TTL
        
        # Try to extract environment-specific TTL from the cached file
        if command -v jq &>/dev/null; then
            local env_ttl
            env_ttl=$(echo "$cached_json" | jq -r ".metadata.ttl.$FEATURE_ENVIRONMENT // $FEATURE_DEFAULT_TTL" 2>/dev/null)
            if [[ "$env_ttl" =~ ^[0-9]+$ ]]; then
                ttl=$env_ttl
            fi
        fi
        
        # Check if cache is expired
        local cache_time
        cache_time=$(stat -c %Y "$FEATURE_FLAGS_CACHE_FILE" 2>/dev/null || stat -f %m "$FEATURE_FLAGS_CACHE_FILE" 2>/dev/null)
        
        if [ -n "$cache_time" ]; then
            local age=$((current_time - cache_time))
            if [ $age -gt "$ttl" ]; then
                # Cache is expired - fetch from web
                echo "Feature flags cache expired, refreshing from web..."
                _FEATURE_FLAGS_JSON=$(_feature_fetch_feature_flags)
            else
                # Cache is still valid - use it
                _FEATURE_FLAGS_JSON=$cached_json
            fi
        else
            # Can't determine cache time - fetch to be safe
            _FEATURE_FLAGS_JSON=$(_feature_fetch_feature_flags)
        fi
    fi
}

# ---------------------------------------------------
# Public Functions
# ---------------------------------------------------

# Check if a feature is enabled
# Arguments:
#   $1 - Feature name
# Returns: 0 if enabled, 1 if disabled
feature-enabled() {
    local feature_name="$1"
    
    # Get flags and check if feature is enabled
    local flags_json
    flags_json=$(_feature_get_feature_flags)
    _feature_is_feature_enabled "$feature_name" "$flags_json"
}

# Manually refresh feature flags
# Useful when changing environments or after updating flags on the server
feature-refresh() {
    # Reload environment setting from config file
    if [ -f "$FEATURE_CONFIG_FILE" ]; then
        # shellcheck disable=SC1090
        source "$FEATURE_CONFIG_FILE"
        echo "Reloaded environment setting: $FEATURE_ENVIRONMENT"
    fi
    
    # Force refresh by clearing the cached variable
    unset _FEATURE_FLAGS_JSON
    
    # Remove the cache file
    rm -f "$FEATURE_FLAGS_CACHE_FILE"
    
    # Fetch fresh flags
    _FEATURE_FLAGS_JSON=$(_feature_fetch_feature_flags)
    
    # Show current feature status
    feature-show
}

# Show current feature status
# Displays environment and all feature flags with their values
feature-show() {
    local flags_json
    flags_json=$(_feature_get_feature_flags)
    
    echo "Current environment: $FEATURE_ENVIRONMENT"
    
    if command -v jq &>/dev/null; then
        # Extract metadata with jq
        local version
        version=$(echo "$flags_json" | jq -r '.metadata.version // "unknown"')
        local generated_at
        generated_at=$(echo "$flags_json" | jq -r '.metadata.generated_at // "unknown"')
        local ttl
        ttl=$(echo "$flags_json" | jq -r ".metadata.ttl.$FEATURE_ENVIRONMENT // $FEATURE_DEFAULT_TTL")
        
        echo "Flags version: $version (generated: $generated_at, TTL: ${ttl}s)"
        
        echo "Feature status:"
        
        # Process all features in a single jq command to avoid subshell issues
        local feature_list
        feature_list=$(echo "$flags_json" | jq -r ".$FEATURE_ENVIRONMENT | to_entries[] | \"\(.key): \(.value)\"" 2>/dev/null)
        
        if [ -n "$feature_list" ]; then
            echo "$feature_list" | while read -r line; do
                echo "  - $line"
            done
        else
            echo "  No features defined for $FEATURE_ENVIRONMENT environment"
        fi
    else
        # Simplified output without jq
        echo "Feature flags loaded (jq not available for detailed view)"
        echo "Raw flags: $(echo "$flags_json" | grep -o "\"$FEATURE_ENVIRONMENT\":{[^}]*}")"
    fi

    echo ""
    echo "Use 'feature-switch-env <environment>' to switch environments."
    if [[ "$FEATURE_ENVIRONMENT" = "development" ]] || [[ "$FEATURE_ENVIRONMENT" = "testing" ]]; then
        echo "Use 'feature-force-sync' to force sync from remote server."
        echo "Use 'feature-set <feature_name> <value>' to set a feature flag."
        echo "Use 'feature-remove <feature_name>' to remove a feature flag."
        echo "Use 'feature-set-sync <behavior>' to set synchronization behavior."
        echo "Use 'feature-show-sync-info' to view synchronization settings."
        echo "Use 'feature-refresh' to refresh feature flags."
    fi
    echo ""
}

# Remove a feature flag locally
# Arguments:
#   $1 - Feature name
#   $2 - Environment (optional, defaults to current environment)
feature-remove() {
    local feature_name="$1"
    local environment="${2:-$FEATURE_ENVIRONMENT}"
    
    # Validate inputs
    if [ -z "$feature_name" ]; then
        echo "Error: Feature name is required"
        return 1
    fi
    
    # Get current flags
    local flags_json
    flags_json=$(_feature_get_feature_flags)
    
    # Check if feature exists - fixed this check
    if ! echo "$flags_json" | jq -e ".$environment | has(\"$feature_name\")" &>/dev/null || \
       [ "$(echo "$flags_json" | jq -e ".$environment | has(\"$feature_name\")")" != "true" ]; then
        echo "Error: Feature '$feature_name' does not exist in $environment environment"
        return 1
    fi
    
    # Update the version number
    local current_version
    current_version=$(echo "$flags_json" | jq -r ".metadata.version")
    local major minor patch
    IFS='.' read -r major minor patch <<< "$current_version"
    patch=$((patch + 1))
    local new_version="$major.$minor.$patch"
    
    # Use jq to update the JSON
    local updated_json
    updated_json=$(echo "$flags_json" | jq "del(.$environment.\"$feature_name\") | .metadata.version = \"$new_version\" | .metadata.generated_at = \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"")
    
    # Update cache
    echo "$updated_json" > "$FEATURE_FLAGS_CACHE_FILE"
    
    # Update in-memory cache
    _FEATURE_FLAGS_JSON="$updated_json"
    
    echo "Removed feature '$feature_name' from $environment environment"
    echo "Updated version to $new_version"
    
    # Show updated features
    feature-show
}

# Set a feature flag locally (for development/testing)
# Arguments:
#   $1 - Feature name
#   $2 - Value (true/false)
#   $3 - Environment (optional, defaults to current environment)
feature-set() {
    local feature_name="$1"
    local value="$2"
    local environment="${3:-$FEATURE_ENVIRONMENT}"
    
    # Validate inputs
    if [ -z "$feature_name" ]; then
        echo "Error: Feature name is required"
        return 1
    fi
    
    if [ "$value" != "true" ] && [ "$value" != "false" ]; then
        echo "Error: Value must be 'true' or 'false'"
        return 1
    fi
    
    # Get current flags
    local flags_json
    flags_json=$(_feature_get_feature_flags)
    
    # Check if feature already exists with the same value
    local feature_exists=false
    local current_value=""
    
    if echo "$flags_json" | jq -e ".$environment.\"$feature_name\"" &>/dev/null; then
        feature_exists=true
        current_value=$(echo "$flags_json" | jq -r ".$environment.\"$feature_name\"")
    fi
    
    # Only increment version if the feature is new or the value is changing
    local new_version
    if [ "$feature_exists" = "false" ] || [ "$current_value" != "$value" ]; then
        # Update the version number
        local current_version
        current_version=$(echo "$flags_json" | jq -r ".metadata.version")
        local major minor patch
        IFS='.' read -r major minor patch <<< "$current_version"
        patch=$((patch + 1))
        new_version="$major.$minor.$patch"
    else
        # No change, keep the same version
        new_version=$(echo "$flags_json" | jq -r ".metadata.version")
    fi
    
    # Update the flag and metadata
    local updated_json
    updated_json=$(echo "$flags_json" | jq ".$environment.\"$feature_name\" = $value | .metadata.version = \"$new_version\" | .metadata.generated_at = \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"")
    
    # Update cache
    echo "$updated_json" > "$FEATURE_FLAGS_CACHE_FILE"
    
    # Update in-memory cache
    _FEATURE_FLAGS_JSON="$updated_json"
    
    if [ "$feature_exists" = "false" ]; then
        echo "Added feature '$feature_name' with value $value in $environment environment"
        echo "Updated version to $new_version"
    elif [ "$current_value" != "$value" ]; then
        echo "Updated feature '$feature_name' from $current_value to $value in $environment environment"
        echo "Updated version to $new_version"
    else
        echo "Feature '$feature_name' already set to $value in $environment environment"
        echo "No version change needed"
    fi
    
    # Show updated features
    feature-show
}

# Switch between environments
# Arguments:
#   $1 - Environment name (development, testing, production)
feature-switch-env() {
    local input_env="$1"
    local env=""
    
    # Default environment mappings
    declare -A env_map
    env_map=( 
        ["dev"]="development"
        ["test"]="testing" 
        ["prod"]="production"
    )
    
    # Load custom environments from config if available
    # Details for the custom environment file
    # File: ~/.feature-environments
    # Purpose: Define custom environment mappings

    # Additional environment abbreviations
    # env_map["ins"]="insider"  # Add short form for insider
    # env_map["canary"]="canary"  # Example additional environment
    # env_map["beta"]="beta"  # Example additional environment
    # Add more mappings as needed
    local custom_env_file="${HOME}/.feature-environments"
    if [ -f "$custom_env_file" ]; then
        # shellcheck disable=SC1090
        source "$custom_env_file"
    fi
    
    # Try direct match first
    if [ -n "${env_map[$input_env]}" ]; then
        # Input is an abbreviation, get the full name
        env="${env_map[$input_env]}"
    else
        # Check if it's already a full environment name
        local found=false
        for valid_env in "${env_map[@]}"; do
            if [ "$input_env" = "$valid_env" ]; then
                env="$input_env"
                found=true
                break
            fi
        done
        
        # If still not found, use as-is (custom environment)
        if [ "$found" = false ]; then
            env="$input_env"
        fi
    fi
    
    # Save previous environment for comparison
    local prev_env="$FEATURE_ENVIRONMENT"
    
    # Update config file, preserving sync behavior
    if [ -f "$FEATURE_CONFIG_FILE" ] && grep -q "FEATURE_SYNC_BEHAVIOR" "$FEATURE_CONFIG_FILE"; then
        local sync_behavior
        sync_behavior=$(grep "FEATURE_SYNC_BEHAVIOR" "$FEATURE_CONFIG_FILE" | cut -d'"' -f2)
        
        echo "FEATURE_ENVIRONMENT=\"$env\"" > "$FEATURE_CONFIG_FILE"
        echo "FEATURE_SYNC_BEHAVIOR=\"$sync_behavior\"" >> "$FEATURE_CONFIG_FILE"
    else
        echo "FEATURE_ENVIRONMENT=\"$env\"" > "$FEATURE_CONFIG_FILE"
        
        # Only add sync behavior if it's defined
        if [ -n "$FEATURE_SYNC_BEHAVIOR" ]; then
            echo "FEATURE_SYNC_BEHAVIOR=\"$FEATURE_SYNC_BEHAVIOR\"" >> "$FEATURE_CONFIG_FILE"
        fi
    fi
    
    # Update current session
    FEATURE_ENVIRONMENT="$env"
    
    echo "Switched from $prev_env to $env environment."
    
    # Make sure we have a valid default JSON for the new environment
    # This fixes the JQ parse errors by ensuring a valid JSON structure
    local flags_json
    flags_json=$(_feature_get_feature_flags)
    
    # Check if the environment key exists in the JSON
    if command -v jq &>/dev/null; then
        if ! echo "$flags_json" | jq -e "has(\"$env\")" &>/dev/null; then
            # Environment doesn't exist in JSON, add it
            local updated_json
            updated_json=$(echo "$flags_json" | jq ".$env = {}")
            echo "$updated_json" > "$FEATURE_FLAGS_CACHE_FILE"
            
            # Update in-memory cache if used
            if [ -n "$_FEATURE_FLAGS_JSON" ]; then
                _FEATURE_FLAGS_JSON="$updated_json"
            fi
        fi
    else
        # Without jq, attempt a simple check if environment section exists
        if ! grep -q "\"$env\":{" "$FEATURE_FLAGS_CACHE_FILE" 2>/dev/null; then
            # Add an empty environment section
            # This is a simplistic approach - better with jq
            local temp_file
            temp_file=$(mktemp)
            
            cat "$FEATURE_FLAGS_CACHE_FILE" | sed "s/\"metadata\":/\"$env\":{},\"metadata\":/" > "$temp_file"
            mv "$temp_file" "$FEATURE_FLAGS_CACHE_FILE"
        fi
    fi
    
    # Always refresh when changing environments
    echo "Running feature-refresh to update current session..."
    feature-refresh
    
    # Show sync status if function exists
    if type feature-show-sync-info &>/dev/null; then
        feature-show-sync-info
    fi
}

# Set the synchronization behavior for feature flags
# Arguments:
#   $1 - Sync behavior: "auto", "manual", or "local-only"
feature-set-sync() {
    local behavior="$1"
    
    if [[ "$behavior" =~ ^(auto|manual|local-only)$ ]]; then
        # Update config file to include sync behavior
        if [ -f "$FEATURE_CONFIG_FILE" ]; then
            # Read existing config without sync setting
            local config_content
            config_content=$(grep -v "FEATURE_SYNC_BEHAVIOR" "$FEATURE_CONFIG_FILE")
            
            # Write back config with new sync setting
            echo "$config_content" > "$FEATURE_CONFIG_FILE"
            echo "FEATURE_SYNC_BEHAVIOR=\"$behavior\"" >> "$FEATURE_CONFIG_FILE"
        else
            # Create new config
            echo "FEATURE_ENVIRONMENT=\"$FEATURE_ENVIRONMENT\"" > "$FEATURE_CONFIG_FILE"
            echo "FEATURE_SYNC_BEHAVIOR=\"$behavior\"" >> "$FEATURE_CONFIG_FILE"
        fi
        
        # Update current session
        FEATURE_SYNC_BEHAVIOR="$behavior"
        
        echo "Set synchronization behavior to '$behavior'"
        
        # Show sync info
        feature-show-sync-info
    else
        echo "Invalid sync behavior. Use 'auto', 'manual', or 'local-only'."
        return 1
    fi
}

# Display synchronization settings
feature-show-sync-info() {
    echo "Current synchronization behavior: $FEATURE_SYNC_BEHAVIOR"
    echo ""
    echo "Available behaviors:"
    echo "  - auto: Automatically sync in production, use local overrides in dev/test if available"
    echo "  - manual: Only sync when explicitly refreshed with feature-refresh"
    echo "  - local-only: Never sync from remote, always use local files"
    echo ""
    echo "Use 'feature-set-sync <behavior>' to change the sync behavior."
    echo ""
    
    if [ "$FEATURE_ENVIRONMENT" = "development" ]; then
        if [ -f "$FEATURE_DEV_LOCAL_OVERRIDE" ]; then
            echo "Developer override file exists at: $FEATURE_DEV_LOCAL_OVERRIDE"
        else
            echo "No developer override file found"
        fi
    fi
    
    if [ "$FEATURE_ENVIRONMENT" = "testing" ]; then
        if [ -f "$FEATURE_TEST_LOCAL_OVERRIDE" ]; then
            echo "Testing override file exists at: $FEATURE_TEST_LOCAL_OVERRIDE"
        else
            echo "No testing override file found"
        fi
    fi
}

# Force sync from remote server
# Useful for updating local overrides with latest server config
feature-force-sync() {
    local current_env="$FEATURE_ENVIRONMENT"
    local should_update_override=false
    local override_file=""
    
    if [ "$current_env" = "development" ]; then
        should_update_override=true
        override_file="$FEATURE_DEV_LOCAL_OVERRIDE"
    elif [ "$current_env" = "testing" ]; then
        should_update_override=true
        override_file="$FEATURE_TEST_LOCAL_OVERRIDE"
    fi
    
    # Temporarily set sync behavior to auto
    local original_behavior="$FEATURE_SYNC_BEHAVIOR"
    FEATURE_SYNC_BEHAVIOR="auto"
    
    # Force cache invalidation
    rm -f "$FEATURE_FLAGS_CACHE_FILE"
    unset _FEATURE_FLAGS_JSON
    
    # Fetch fresh data
    local new_flags
    new_flags=$(_feature_fetch_feature_flags)
    
    # Update local override if needed
    if [ "$should_update_override" = true ] && [ -n "$override_file" ]; then
        echo "$new_flags" > "$override_file"
        echo "Updated local override at $override_file"
    fi
    
    # Restore original sync behavior
    FEATURE_SYNC_BEHAVIOR="$original_behavior"
    
    echo "Synced latest feature flags from remote server"
    feature-show
}

# ---------------------------------------------------
# Initialization (root level)
# ---------------------------------------------------

# Initial load of feature flags
_feature_initialize