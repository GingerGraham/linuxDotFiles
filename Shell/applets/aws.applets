#!/usr/bin/env bash

# Path: Shell/applets/aws.applets
# Purpose: AWS specific applets for shell commands
# Use: Add applets to this file and they will be sourced by ~/.applets

# This script adds helper functions to the shell
# It is sourced by .bashrc or .zshrc via ~/.applets
# Define additional functions here

# Update AWS CLI
aws-update () {
  # Check if user has sudo access using provided function and exit if not
  if ! sudo-test; then
    log_error "Cannot update AWS CLI - user does not have privilege elevation access"
    return 1
  fi
  
  # Check if the OS variable is set - should be set in .zshrc
  if [[ -z ${OS} ]]; then
    log_warn "OS variable is not set"
    return 1
  fi
  
  # If the OS is Linux then run the Linux function
  if [[ "${OS}" == "Linux" ]]; then
    aws-update-linux
    return 0
  fi
  
  # If the OS is Mac then run the Mac function
  if [[ "${OS}" == "Mac" ]]; then
    aws-update-mac
    return 0
  fi
  
  # If the OS is not Linux or Mac then report an error - will only get here if OS is not set
  log_error "OS not supported: OS is not Linux or Mac"
  return 1
}

aws-cli-install-rpm () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for AWS CLI installation - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi
  
  # Check if the command dnf is available and use it if so
  if command -v dnf &> /dev/null; then
    log_info "Installing AWS CLI using dnf"
    ${elevation_cmd} dnf install -y awscli2
  elif command -v yum &> /dev/null; then
    log_info "Installing AWS CLI using yum"
    ${elevation_cmd} yum install -y awscli2
  else
    log_error "Neither dnf nor yum is installed - required for AWS CLI install"
    return 1
  fi

  # If the install fails then exit
  if [[ $? -ne 0 ]]; then
    log_error "AWS CLI install failed"
    return 1
  fi
  log_info "Installed AWS CLI"
  log_info "Completed"
  return 0
}

aws-cli-install-curl () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for AWS CLI installation - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi
  
  # Check if the command curl is not available then return an error - required for the install
  if ! command -v curl &> /dev/null; then
    log_error "Curl is not installed - required for AWS CLI install"
    return 1
  fi

  # If the command unzip is not available then return an error - required for the install
  if ! command -v unzip &> /dev/null; then
    log_error "Unzip is not installed - required for AWS CLI install"
    return 1
  fi

  log_info "Downloading AWS CLI"
  cd /tmp || return
  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  log_info "AWS CLI downloaded"
  log_info "Unzipping AWS CLI"
  unzip -qo awscliv2.zip
  # Verify the unzip was successful
  if [[ $? -ne 0 ]]; then
    log_error "Unzipping AWS CLI failed"
    return 1
  fi
  log_info "Unzipped AWS CLI"
  log_info "Installing AWS CLI"
  ${elevation_cmd} ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
  # If the install fails then exit
  if [[ $? -ne 0 ]]; then
    log_error "AWS CLI install failed"
    return 1
  fi
  log_info "Installed AWS CLI"
  log_info "Cleaning up"
  rm -rf ./awscliv2.zip ./aws
  cd - || return
  log_info "Completed"
  return 0
}

# Update AWS CLI on Linux
aws-update-linux () {
  # Check if the AWS CLI is already installed and if so then capture the current version
  if command -v aws &> /dev/null; then
    AWS_CURRENT_VERSION=$(aws --version 2>&1 | awk '{print $1}' | awk -F'/' '{print $2}')
    log_info "Current AWS CLI version: ${AWS_CURRENT_VERSION}"
  fi
  # Check the current latest available from AWS GitHub
  AWS_LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/aws/aws-cli/v2/CHANGELOG.rst | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' -m 1)
  # If the check for the latest version fails then return an error otherwise print the latest version
  if [[ -z ${AWS_LATEST_VERSION} ]]; then
    log_error "Unable to determine latest AWS CLI version"
    return 1
  else
    log_info "Latest AWS CLI version: ${AWS_LATEST_VERSION}"
  fi
  # If the AWS CLI is already installed and the latest version is the same as the current version then return
  if [[ -n ${AWS_CURRENT_VERSION} ]] && [[ ${AWS_CURRENT_VERSION} == ${AWS_LATEST_VERSION} ]]; then
    log_info "AWS CLI is already up to date"
    return 0
  fi
  # Check if the command dnf or yum is available and use it if so
  if command -v dnf &> /dev/null || command -v yum &> /dev/null; then
    aws-cli-install-rpm
    return 0
  fi
  # If dnf and yum are not available then use curl to install
  aws-cli-install-curl
  return 0
}

# Update AWS CLI on Mac
aws-update-mac () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for AWS CLI installation - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi
  
  # Check if the command curl is not available then return an error - required for the install
  if ! command -v curl &> /dev/null; then
    log_error "Curl is not installed - required for AWS CLI install"
    return 1
  fi
  # Check if the AWS CLI is already installed and if so then capture the current version
  if command -v aws &> /dev/null; then
    AWS_CURRENT_VERSION=$(aws --version 2>&1 | awk '{print $1}' | awk -F'/' '{print $2}')
    log_info "Current AWS CLI version: ${AWS_CURRENT_VERSION}"
  fi
  # Check the current latest available from AWS GitHub
  AWS_LATEST_VERSION=$(curl -s https://raw.githubusercontent.com/aws/aws-cli/v2/CHANGELOG.rst | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' -m 1)
  # If the check for the latest version fails then return an error otherwise print the latest version
  if [[ -z ${AWS_LATEST_VERSION} ]]; then
    log_error "Unable to determine latest AWS CLI version"
    return 1
  else
    log_info "Latest AWS CLI version: ${AWS_LATEST_VERSION}"
  fi
  # If the AWS CLI is already installed and the latest version is the same as the current version then return
  if [[ -n ${AWS_CURRENT_VERSION} ]] && [[ ${AWS_CURRENT_VERSION} == ${AWS_LATEST_VERSION} ]]; then
    log_info "AWS CLI is already up to date"
    return 0
  fi
  log_info "Downloading AWS CLI"
  cd /tmp || return
  curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
  log_info "AWS CLI downloaded"
  log_info "Installing AWS CLI"
  ${elevation_cmd} installer -pkg ./AWSCLIV2.pkg -target /
  # If the install fails then exit
  if [[ $? -ne 0 ]]; then
    log_error "AWS CLI install failed"
    return 1
  fi
  log_info "Installed AWS CLI"
  log_info "Cleaning up"
  rm -rf ./AWSCLIV2.pkg
  cd - || return
  log_info "Completed"
  return 0
}
