#!/usr/bin/env bash

# Path: .applets
# Purpose: Distro update applets for shell commands
# Use: Add applets to this file and they will be sourced by ~/.applets

# This script adds helper functions to the shell
# It is sourced by .bashrc or .zshrc via ~/.applets
# Define additional functions here

# If distro is Fedora complete the steps to upgrade to the specified version
# Accepts one named argument which is the version to upgrade to
# Example: fedora-upgrade -v 40
fedora-upgrade() {
  local version
  while (( "$#" )); do
    case "$1" in
      -v|--version)
        version=$2
        shift 2
        ;;
      [0-9]*)
        version=$1
        shift
        ;;
      *)
        log_error "Invalid argument"
        return 1
        ;;
    esac
  done

  if [[ -z $version ]]; then
    log_error "No version specified"
    return 1
  fi

  # Check if the system already needs a reboot
  if [[ -f /var/run/reboot-required ]]; then
    log_error "System needs a reboot"
    return 1
  fi
  
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for distro upgrade - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  if [[ -f /etc/fedora-release ]]; then
    log_info "Updating Fedora to version $version"
    ${elevation_cmd} dnf -y --refresh update
    ${elevation_cmd} dnf -y upgrade
    # If the system needs a reboot, do not continue, prompt the user to reboot and then run the script again
    if [[ -f /var/run/reboot-required ]]; then
      log_error "System needs a reboot"
      log_info "Reboot the system and run 'fedora-upgrade -v $version' again"
      return 1
    fi
    ${elevation_cmd} dnf -y install dnf-plugin-system-upgrade
    ${elevation_cmd} dnf -y system-upgrade download --releasever="$version"
    ${elevation_cmd} dnf -y system-upgrade reboot
  else
    log_error "Not a Fedora system"
    return 1
  fi
}

# If distro is Ubuntu complete the steps to upgrade to the specified version
ubuntu-upgrade() {
  # Check if the system already needs a reboot
  if [[ -f /var/run/reboot-required ]]; then
    log_error "System needs a reboot"
    return 1
  fi
  
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for distro upgrade - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  if [[ -f /etc/lsb-release ]]; then
    log_info "Updating Ubuntu"
    ${elevation_cmd} apt update
    ${elevation_cmd} apt upgrade -y
    ${elevation_cmd} apt dist-upgrade -y
    ${elevation_cmd} apt install update-manager-core
    ${elevation_cmd} do-release-upgrade -f DistUpgradeViewNonInteractive -m desktop
  else
    log_error "Not an Ubuntu system"
    return 1
  fi
}

# If the distro is openSUSE complete the steps to upgrade to the specified version
opensuse-upgrade() {
  # Check if the system already needs a reboot
  if [[ -f /var/run/reboot-required ]]; then
    log_error "System needs a reboot"
    return 1
  fi
  
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for distro upgrade - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  if [[ -f /etc/os-release ]]; then
    log_info "Updating openSUSE"
    ${elevation_cmd} zypper refresh
    ${elevation_cmd} zypper update
    ${elevation_cmd} zypper dist-upgrade
  else
    log_error "Not an openSUSE system"
    return 1
  fi
}
