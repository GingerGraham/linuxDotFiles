#!/usr/bin/env bash

# Path: .applets
# Purpose: General purpose applets for shell commands
# Use: Add applets to this file and they will be sourced by ~/.applets

# This script adds helper functions to the shell
# It is sourced by .bashrc or .zshrc via ~/.applets
# Define additional functions here

# adding use of website cheat.sh for command lookup
cheat(){
    curl "cheat.sh/$1"
}

# Cleanup removed branches in git
function git_cleanup() {
    # Fetch updates
    git fetch -p

    # Remove local branches that have been deleted on the remote
    for branch in $(git branch -vv | grep ': gone]' | awk '{print $1}'); do
        echo "Deleting branch $branch"
        git branch -D "$branch"
    done
}

# Show SSH Tunnel
show_ssh_tunnel(){
  # ps -aux | grep -iE 'ssh\s+(-[fNL]+\s+)*-?[fNL]+'
  pgrep -f 'ssh\s+(-[fNL]+\s+)*-?[fNL]+'
}

# Test sudo access
sudo_test (){
  if [[ ! $(sudo -l -U "${USER}") ]]; then
    echo "[ERROR] User does not have sudo access"
    return 1
  else
    return 0
  fi
}

# Single command to update all tools including in this script
update_tools () {
  echo "== Updating Tools =="
  echo "== Updating AWS CLI =="
  aws_update
  echo "== Updating Kubectl =="
  echo "[INFO] Updating Kubectl to latest version - using set_kubectl -v <version> to set a specific version"
  set_kubectl -s
  echo "== Installing Helm =="
  helm_install
  echo "== Updating Terraform =="
  terraform_install
  echo "== Updating Ansible =="
  ansible_install
  return 0
}

# Get the version of GO if installed and save it to an envrioment variable
get_go_version () {
  if [[ -x "$(command -v go)" ]]; then
    GO_VERSION=$(go version | awk '{print $3}'| tr -d 'go')
    export GO_VERSION
  else
    echo "[ERROR] GO is not installed"
    return 1
  fi
}

# Get and return public IPv4 and IPv6 addresses
# Use dig if dig is available, otherwise use curl
get_public_ip () {
  if [[ -x "$(command -v dig)" ]]; then
    echo "IPv4: $(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}')"
    echo "IPv6: $(dig -6 TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{ print $2}')"
  else
    echo "IPv4: $(curl -s https://ipv4.icanhazip.com)"
    echo "IPv6: $(curl -s https://ipv6.icanhazip.com)"
  fi
}

 open_workspace () {
  if ! command -v code &> /dev/null && ! command -v code-insiders &> /dev/null; then
    echo "[ERROR] Visual Studio Code is not installed"
    return 1
  fi
  # Accept a directory path as an argument or set ${HOME}/Developement/workspaces as the default
  local workspace_path="${1:-${HOME}/Development/workspaces}"
  local workspaces_full_path=()
  # Check if workspace_path is a symlink and if it is get the full path
  if [[ -L "${workspace_path}" ]]; then
    workspace_path=$(readlink -f "${workspace_path}")
  fi
  # Check if the directory exists and if it does ensure that we have the full valid path
  if [[ -d "${workspace_path}" ]]; then
    if command -v mapfile &> /dev/null; then
      mapfile -t workspaces_full_path < <(find "${workspace_path}" -type f -name "*.code-workspace")
    else
      workspaces_full_path=($(find "${workspace_path}" -type f -name "*.code-workspace"))
    fi
  fi
  # Check if we have any workspaces
  if [[ ${#workspaces_full_path[@]} -eq 0 ]]; then
    echo "[ERROR] No workspaces found in ${workspace_path}"
    return 1
  fi
  local workspaces=()
  for workspace in "${workspaces_full_path[@]}"; do
    workspaces+=("$(basename "${workspace}" .code-workspace)")
  done
  echo "Available workspaces:"
  PS3="Please select the number of a workspace to open: "
  select workspace in "${workspaces[@]}"; do
    if [[ -n "${workspace}" ]]; then
        for wsp in "${workspaces_full_path[@]}"; do
          if [[ "${workspace}" == "$(basename "${wsp}" .code-workspace)" ]]; then
            if command -v code-insiders &> /dev/null; then
              code-insiders "${wsp}"
            else
              code "${wsp}"
            fi
            break
          fi
        done
      break
    else
      echo "[ERROR] Invalid selection, try again"
    fi
  done
 }

 # Function to reregister LUKS key with tpm2 using systemd-crpytenroll
 # Requires the tpm2-tools and dracut tools to be installed
 register_tpm () {
    # Use lsblk with JSON output for easier parsing
    local IFS=$'\n'
    local luks_devices=()
    local partition_device=""
    local enrolled_count=0

    # Check if the required tools are installed
    if ! command -v lsblk &> /dev/null; then
        echo "[ERROR] Required tools are not installed. Please install lsblk" >&2
        return 1
    fi
    if ! command -v tpm2 &> /dev/null || ! command -v dracut &> /dev/null; then
        echo "[ERROR] Required tools are not installed. Please install tpm2-tools and dracut" >&2
        return 1
    fi
    if ! command -v cryptsetup &> /dev/null || ! command -v systemd-cryptenroll &> /dev/null; then
        echo "[ERROR] Required tools are not installed. Please install cryptsetup and systemd-cryptenroll" >&2
        return 1
    fi

    # Check if user has sudo access
    if ! sudo_test; then
        return 1
    fi

    # Process lsblk output to find LUKS partitions
    while read -r line; do
        # Skip header line
        if [[ $line =~ ^NAME ]]; then
            continue
        fi

        # Check if this is a partition line that's followed by a LUKS device
        if [[ $line =~ p[0-9]+[[:space:]] && ! $line =~ crypt ]]; then
            # Extract the partition name, handling the tree structure
            partition_device=$(echo "$line" | awk '{print $1}' | tr -d '└─├─')
            
            # Look at the next line to see if it's a LUKS device
            read -r next_line
            
            if [[ $next_line =~ crypt ]]; then
                device_path="/dev/$partition_device"
                
                if sudo cryptsetup isLuks "$device_path"; then
                    echo "[INFO] Found LUKS encrypted partition: $device_path"
                    luks_devices+=("$device_path")
                fi
            fi
        fi
    done < <(lsblk)

    # Process all found LUKS devices
    for device_path in "${luks_devices[@]}"; do
        echo "[INFO] Enrolling TPM2 for $device_path..."
        if sudo systemd-cryptenroll \
            --wipe-slot=tpm2 \
            --tpm2-device=auto \
            --tpm2-pcrs="0+2+4+5+7" \
            "$device_path"; then
            echo "[INFO] Successfully enrolled TPM2 for $device_path"
            ((enrolled_count++))
        else
            echo "[ERROR] Failed to enroll TPM2 for $device_path" >&2
        fi
    done

    echo "[INFO] TPM2 enrollment completed. Successfully enrolled $enrolled_count devices."
    luks_devices=()
    return 0
 }