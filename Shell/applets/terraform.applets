#!/usr/bin/env bash

# Path: Shell/applets/terraform.applets
# Purpose: Terraform (and Terragrunt) focused applets for shell commands
# Use: Add applets to this file and they will be sourced by ~/.applets

# This script adds helper functions to the shell
# It is sourced by .bashrc or .zshrc via ~/.applets
# Define additional functions here

# Update/Install Terraform for both Linux and mac
terraform-install () {
  if [[ -z ${OS} ]]; then
    log_warn "OS variable is not set"
    return 1
  fi
  # Check the latest available version of Terraform
  TF_VERSION=$(get-latest-terraform-version)
  # Check if the version is set and if not report an error
  if [[ -z ${TF_VERSION} ]]; then
    log_error "Unable to determine the latest version of Terraform"
    return 1
  fi
  if [[ ${OS} == "Linux" ]]; then
    is-git-installed
    tf-install-linux "${TF_VERSION}"
    tflint-install-linux
    trivy-install-linux
    # terraform-docs-install-linux
  fi
  if [[ ${OS} == "Mac" ]]; then
    tf-install-mac "${TF_VERSION}"
    tflint-install-mac
    trivy-install-mac
    # terraform-docs-install-mac
  fi
  # If OS is not set or is not Linux or Darwin then report an error
  if [[ ${OS} != "Linux" ]] && [[ ${OS} != "Mac" ]]; then
    log_error "OS variable is not set to Linux or Darwin"
    return 1
  fi
}

# Get the current latest version of Terraform from the HashiCorp API
get-latest-terraform-version () {
  curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | tr -d '\r' | grep -Eo '"current_version":"[0-9]+\.[0-9]+\.[0-9]+"' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+'
}

# Is git installed
is-git-installed () {
  if ! command -v git &> /dev/null; then
    log_error "Git is not installed.  Please install Git and try again"
    return 1
  fi
}

# Is brew installed
is-brew-installed () {
  if ! command -v brew &> /dev/null; then
    log_error "Homebrew is not installed.  Please install Homebrew and try again"
    return 1
  fi
}

# Install Terraform for Linux
tf-install-linux () {
  # Catch the passed version of Terraform and set it to the TF_VERSION variable
  TF_VERSION=$1
  # If the TF_VERSION variable is not set then report an error and set the TF_VERSION variable to the latest version of Terraform
  if [[ -z ${TF_VERSION} ]]; then
    log_error "Terraform version not set.  Installing latest version"
    TF_VERSION=$(get-latest-terraform-version)
    if [[ -z ${TF_VERSION} ]]; then
      log_error "Unable to determine the latest version of Terraform"
      return 1
    fi
  fi
  # Get the current version of Terraform if it is already installed
  if command -v terraform &> /dev/null; then
    CURRENT_TF_VERSION=$(terraform version | sed -r 's/Terraform v([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E '[0-9]\.[0-9]+\.[0-9]+')
  fi
  # If the current version of Terraform is the same as the version to be installed then report the version and exit
  if [[ "${CURRENT_TF_VERSION}" == "${TF_VERSION}" ]]; then
    log_info "Terraform ${TF_VERSION} is already installed"
    return 0
  fi
  # Test if the tfenv command is available and if it is exit as no further work needed
  if command -v tfenv &> /dev/null; then
    log_info "tfenv is already installed, updating..."
    if git --git-dir="${HOME}"/.tfenv/.git pull; then
      log_info "tfenv updated"
    else
      log_error "Error updating tfenv"
      return 1
    fi
    if tfenv install "${TF_VERSION}"; then
      log_info "Terraform ${TF_VERSION} installed"
      tfenv use "${TF_VERSION}"
    else
      log_error "Error installing Terraform ${TF_VERSION}"
      return 1
    fi
    return 0
  fi
  # If the tfenv command is not available then install it using the manual installation method
  log_info "tfenv is not installed.  Installing tfenv"
  if git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv; then
    log_info "tfenv installed"
  else
    log_error "Error installing tfenv"
    return 1
  fi
  # If the default tfenv bin directory is not in the PATH then add it to PATH directly
  if [[ ! ":$PATH:" == *":${HOME}/.tfenv/bin:"* ]]; then
    log_info "Adding ${HOME}/.tfenv/bin to PATH for this session"
    PATH="${HOME}/.tfenv/bin:${PATH}"
    log_info "To add this to your PATH permanently add the following line to your .bashrc or .zshrc file:"
    echo "export PATH=\"${HOME}/.tfenv/bin:\$PATH\""
  fi
  # If the tfenv command is not available after adding the bin directory to the PATH then report an error and exit
  if ! command -v tfenv &> /dev/null; then
    log_error "tfenv not found"
    return 1
  fi
  # If the tfenv command is available then install the latest version of Terraform
  log_info "Installing latest version of Terraform"
  tfenv install latest
  # If the tfenv install command fails then report an error and exit
  if [[ $? -ne 0 ]]; then
    log_error "Error installing Terraform"
    return 1
  fi
  # If the tfenv install command is successful then set the latest version of Terraform as the global version
  log_info "Setting Terraform v$(tfenv list-remote | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1) as the global version"
  tfenv use latest
  # If the tfenv use command fails then report an error and exit
  if [[ $? -ne 0 ]]; then
    log_error "Error setting Terraform as the global version"
    return 1
  fi
  # If the tfenv use command is successful then report the version of Terraform installed
  log_info "Terraform $(terraform version | sed -r 's/Terraform v([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E '[0-9]\.[0-9]+\.[0-9]+') installed"
  return 0
}

# Install Terraform for Mac
tf-install-mac () {
  # Catch the passed version of Terraform and set it to the TF_VERSION variable
  TF_VERSION=$1
  # If the TF_VERSION variable is not set then report an error and set the TF_VERSION variable to the latest version of Terraform
  if [[ -z ${TF_VERSION} ]]; then
    log_error "Terraform version not set.  Installing latest version"
    TF_VERSION=$(get-latest-terraform-version)
    if [[ -z ${TF_VERSION} ]]; then
      log_error "Unable to determine the latest version of Terraform"
      return 1
    fi
  fi
  # If terraform is already installed report the version
  if command -v terraform &> /dev/null; then
    CURRENT_TF_VERSION=$(terraform version | sed -r 's/Terraform v([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E '[0-9]\.[0-9]+\.[0-9]+')
  fi
  # If the current version of Terraform is the same as the version to be installed then report the version and exit
  if [[ "${CURRENT_TF_VERSION}" == "${TF_VERSION}" ]]; then
    log_info "Terraform ${TF_VERSION} is already installed"
    return 0
  fi
  # Test if brew, or git, are installed and if one of them is, with a preference for brew, then set the installation method to brew and if neither are installed then report and error and exit
  if command -v brew &> /dev/null; then
    INSTALL_METHOD="brew"
  elif command -v git &> /dev/null; then
    INSTALL_METHOD="git"
  else
    log_error "Neither Homebrew nor Git are installed.  Please install one of them and try again"
    return 1
  fi
  # If the tfenv command is not available then install it using Homebrew
  if ! command -v tfenv &> /dev/null; then
    log_info "tfenv is not installed.  Installing tfenv"
    if [[ ${INSTALL_METHOD} == "brew" ]]; then
      brew install tfenv
    elif [[ ${INSTALL_METHOD} == "git" ]]; then
      git clone
    fi
  else
    log_info "tfenv is already installed, updating..."
    if [[ ${INSTALL_METHOD} == "brew" ]]; then
      brew upgrade tfenv
    elif [[ ${INSTALL_METHOD} == "git" ]]; then
      git --git-dir="${HOME}"/.tfenv/.git pull
    fi
  fi
  # If the default tfenv bin directory is not in the PATH then add it to PATH directly
  if [[ ! ":$PATH:" == *":${HOME}/.tfenv/bin:"* ]]; then
    log_info "Adding ${HOME}/.tfenv/bin to PATH for this session"
    PATH="${HOME}/.tfenv/bin:${PATH}"
    log_info "To add this to your PATH permanently add the following line to your .bashrc or .zshrc file:"
    echo "export PATH=\"${HOME}/.tfenv/bin:\$PATH\""
  fi
  # If the tfenv command is not available after installing it then report an error and exit
  if ! command -v tfenv &> /dev/null; then
    log_error "Error installing tfenv"
    return 1
  fi
  # If the tfenv command is available then install the latest version of Terraform
  log_info "Installing latest version of Terraform"
  tfenv install latest
  # If the tfenv install command fails then report an error and exit
  if [[ $? -ne 0 ]]; then
    log_error "Error installing Terraform"
    return 1
  fi
  # If the tfenv install command is successful then set the latest version of Terraform as the global version
  log_info "Setting Terraform v$(tfenv list-remote | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1) as the global version"
  tfenv use latest
  # If the tfenv use command fails then report an error and exit
  if [[ $? -ne 0 ]]; then
    log_error "Error setting Terraform as the global version"
    return 1
  fi
  # If the tfenv use command is successful then report the version of Terraform installed
  log_info "Terraform $(terraform version | sed -r 's/Terraform v([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E '[0-9]\.[0-9]+\.[0-9]+') installed"
  return 0
}

# Install TFLint for Linux
tflint-install-linux () {
  # Referring to https://github.com/terraform-linters/tflint/blob/master/README.md
  # Check the latest available version of TFLint
  TFLINT_VERSION=$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TFLINT_VERSION} ]]; then
    log_error "Unable to determine the latest version of TFLint"
    return 1
  fi
  # Check if TFLint is already installed and if the current version matches the version to be set
  if command -v tflint &> /dev/null; then
    if [[ "$(tflint --version | sed -r 's/TFLint version ([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E -m 1 '[0-9]\.[0-9]+\.[0-9]+')" == "${TFLINT_VERSION}" ]]; then
      log_info "TFLint ${TFLINT_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "TFLint is not installed or is not the correct version.  Installing TFLint v${TFLINT_VERSION}"
  # If the command unzip is not available then return an error - required for the install
  if ! command -v unzip &> /dev/null; then
    log_error "Unzip is not installed - required for TFLint install"
    return 1
  fi
  # Setting the directory to download TFLint to
  TFLINT_INSTALL_PATH="${HOME}/.local/bin/tf-lint/tflint-${TFLINT_VERSION}"
  export TFLINT_INSTALL_PATH
  # Check if the directory exists and if not create it
  if [[ ! -d "${TFLINT_INSTALL_PATH}" ]]; then
    mkdir -p "${TFLINT_INSTALL_PATH}"
  fi
  # Follow the installation instructions for Linux from the TFLint GitHub page
  log_info "Downloading TFLint-${TFLINT_VERSION}"
  curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
  # Check that the version downloaded is available executable and if it report and error and exit
  if [[ ! -x "${TFLINT_INSTALL_PATH}/tflint" ]]; then
    log_error "Error downloading TFLint v${TFLINT_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "TFLint v${TFLINT_VERSION} downloaded to ${TFLINT_INSTALL_PATH}"
  # Check if the current version of TFLint is a symlink and if so remove it
  if [[ -L "$(command -v tflint)" ]]; then
    log_info "Removing symlink to TFLint"
    rm "$(command -v tflint)"
  fi
  # If current version of TFLint is not a symlink then rename it to TFLint.old
  if command -v tflint &> /dev/null; then
    log_warn "Renaming current version of TFLint (located at $(command -v tflint)) to TFLint.old"
    mv "$(command -v tflint)" "$(command -v tflint).old"
    log_warn "If a permission error is reported then run the following command with sudo"
    echo "sudo mv $(command -v tflint) $(command -v tflint).old"
    log_warn "If you wish to revert to the previous version of TFLint then run the following command:"
    echo "mv $(command -v tflint).old $(command -v tflint)"
  fi
  # Create a symlink to the requested version of TFLint
  log_info "Creating symlink to ${TFLINT_VERSION} located at ${TFLINT_INSTALL_PATH}/tflint"
  ln -s "${TFLINT_INSTALL_PATH}/tflint" "${HOME}/.local/bin/tflint"
}

# Install TFLint for macOS
tflint-install-mac () {
  # Referring to https://github.com/terraform-linters/tflint/blob/master/README.md
  # Check the latest available version of TFLint
  TFLINT_VERSION=$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TFLINT_VERSION} ]]; then
    log_error "Unable to determine the latest version of TFLint"
    return 1
  fi
  # Check if TFLint is already installed and if the current version matches the version to be set
  if command -v tflint &> /dev/null; then
    if [[ "$(tflint --version | sed -r 's/TFLint version ([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E -m 1 '[0-9]\.[0-9]+\.[0-9]+')" == "${TFLINT_VERSION}" ]]; then
      log_info "TFLint ${TFLINT_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "TFLint is not installed or is not the correct version.  Installing TFLint v${TFLINT_VERSION}"
  # Per https://github.com/terraform-linters/tflint/blob/master/README.md use Homebrew to install TFLint
  # Check if Homebrew is installed and if not report an error
  if ! command -v brew &> /dev/null; then
    log_error "Homebrew is not installed.  Please install Homebrew and try again"
    return 1
  fi
  # Check if TFLint is already installed, if not install it, if it is then upgrade it
  if command -v tflint &> /dev/null; then
    log_info "Upgrading TFLint to v${TFLINT_VERSION}"
    brew upgrade tflint
  else
    log_info "Installing TFLint v${TFLINT_VERSION}"
    brew install tflint
  fi
  # Check if the version installed is the correct version and if not report an error
  if [[ "$(tflint --version | sed -r 's/TFLint version ([0-9]\.[0-9]+\.[0-9]+)/\1/' | grep -E -m 1 '[0-9]\.[0-9]+\.[0-9]+')" != "${TFLINT_VERSION}" ]]; then
    log_error "Error installing TFLint v${TFLINT_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "TFLint v${TFLINT_VERSION} installed"
}

trivy-repo-rpm () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for repository configuration - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  # Referring to https://trivy.dev/latest/getting-started/installation/#rhelcentos-official
  # Test if trivy repo is already configured
  if [[ -f /etc/yum.repos.d/trivy.repo ]]; then
    log_info "Trivy repository is already configured"
    return 0
  fi
  # Configure the trivy repository
  log_info "Configuring Trivy repository"
  cat << EOF | ${elevation_cmd} tee -a /etc/yum.repos.d/trivy.repo
[trivy]
name=Trivy repository
baseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/\$basearch/
gpgcheck=1
enabled=1
gpgkey=https://aquasecurity.github.io/trivy-repo/rpm/public.key
EOF
  # Test if the trivy repository is configured
  if [[ ! -f /etc/yum.repos.d/trivy.repo ]]; then
    log_error "Error configuring Trivy repository"
    return 1
  fi
  log_info "Trivy repository configured... Updating package list"
  # Update the package list
  # Test if we have dnf or yum
  if command -v dnf &> /dev/null; then
    ${elevation_cmd} dnf check-update --refresh -y
  elif command -v yum &> /dev/null; then
    ${elevation_cmd} yum check-update -y
  else
    log_error "No package manager found"
    return 1
  fi
  log_info "Package list updated, trivy can now be installed"
}

trivy-repo-deb () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for repository configuration - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  # Referring to https://trivy.dev/latest/getting-started/installation/#debianubuntu-official
  # Test if trivy repo is already configured
  if [[ -f /etc/apt/sources.list.d/trivy.list ]]; then
    log_info "Trivy repository is already configured"
    return 0
  fi
  # Configure the trivy repository
  log_info "Configuring Trivy repository"
  ${elevation_cmd} apt-get install wget gnupg
  wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | ${elevation_cmd} tee /usr/share/keyrings/trivy.gpg > /dev/null
  echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | ${elevation_cmd} tee -a /etc/apt/sources.list.d/trivy.list
  # Test if the trivy repository is configured
  if [[ ! -f /etc/apt/sources.list.d/trivy.list ]]; then
    log_error "Error configuring Trivy repository"
    return 1
  fi
  log_info "Trivy repository configured... Updating package list"
  # Update the package list
  ${elevation_cmd} apt-get update
  log_info "Package list updated, trivy can now be installed"
}

# Install Trivy for Linux
trivy-install-linux () {
  # Get the elevation command (sudo or run0)
  local elevation_cmd
  elevation_cmd=$(get-elevation-command)
  if [[ $? -ne 0 || -z "$elevation_cmd" ]]; then
    log_error "Failed to determine elevation mechanism"
    return 1
  fi
  
  # If using run0, warn about multiple prompts
  if [[ "$elevation_cmd" == "run0" ]]; then
    log_warn "Using run0 for package installation - you may be prompted multiple times"
    log_warn "run0 does not cache credentials like sudo does"
  fi

  # Referring to https://trivy.dev/latest/getting-started/installation/#linux
  # Check the latest available version of Trivy
  TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TRIVY_VERSION} ]]; then
    log_error "Unable to determine the latest version of Trivy"
    return 1
  fi
  # Check if Trivy is already installed and if the current version matches the version to be set
  if command -v trivy &> /dev/null; then
    if [[ "$(trivy version | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | sed 's/Version: //' | head -n 1)" == "${TRIVY_VERSION}" ]]; then
      log_info "Trivy ${TRIVY_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "Trivy is not installed or is not the correct version.  Installing Trivy v${TRIVY_VERSION}"
  # Test if we have dnf or yum
  if command -v dnf &> /dev/null; then
    trivy-repo-rpm
    ${elevation_cmd} dnf install trivy -y
  elif command -v yum &> /dev/null; then
    trivy-repo-rpm
    ${elevation_cmd} yum install trivy -y
  elif command -v apt-get &> /dev/null; then
    trivy-repo-deb
    ${elevation_cmd} apt-get install trivy -y
  else
    log_error "No package manager found"
    return 1
  fi
  # Check if the version installed is the correct version and if not report an error
  if [[ "$(trivy version | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | sed 's/Version: //' | head -n 1)" != "${TRIVY_VERSION}" ]]; then
    log_error "Error installing Trivy v${TRIVY_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "Trivy v${TRIVY_VERSION} installed"
}

# Install Trivy for macOS using Homebrew
# Referring to https://trivy.dev/latest/getting-started/installation/#homebrew-official
trivy-install-mac () {
  # Check the latest available version of Trivy
  TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TRIVY_VERSION} ]]; then
    log_error "Unable to determine the latest version of Trivy"
    return 1
  fi
  # Check if Trivy is already installed and if the current version matches the version to be set
  if command -v trivy &> /dev/null; then
    if [[ "$(trivy version | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | sed 's/Version: //' | head -n 1)" == "${TRIVY_VERSION}" ]]; then
      log_info "Trivy ${TRIVY_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "Trivy is not installed or is not the correct version.  Installing Trivy v${TRIVY_VERSION}"
  # Check if Homebrew is installed and if not report an error
  if ! command -v brew &> /dev/null; then
    log_error "Homebrew is not installed.  Please install Homebrew and try again"
    return 1
  fi
  # Check if Trivy is already installed, if not install it, if it is then upgrade it
  if command -v trivy &> /dev/null; then
    log_info "Upgrading Trivy to v${TRIVY_VERSION}"
    brew upgrade trivy
  else
    log_info "Installing Trivy v${TRIVY_VERSION}"
    brew install trivy
  fi
  # Check if the version installed is the correct version and if not report an error
  if [[ "$(trivy version | grep -E -m 1 '[0-9]+\.[0-9]+\.[0-9]+' | sed 's/Version: //' | head -n 1)" != "${TRIVY_VERSION}" ]]; then
    log_error "Error installing Trivy v${TRIVY_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "Trivy v${TRIVY_VERSION} installed"
}

# Install terraform-docs for Linux
terraform-docs-install-linux () {
  # Issue or bug with v0.17.0 of terraform-docs, the go install doesn't produce the expected binary. For now marking this module as not working for Linux and exiting
  log_error "Automated installation of terraform-docs is not available for Linux.  Please install terraform-docs manually"
  log_error "For more information please refer to https://github.com/terraform-docs/terraform-docs#installation"
  return 1
  # Referring to https://github.com/terraform-docs/terraform-docs#installation
  # Options for Linux are more limited than for macOS and either require homebrew for Linux or to use Go package management
  # Test if go/golang is not installed; if not then exit and refer user to the terraform-docs installation page
  if ! command -v go &> /dev/null; then
    log_error "Automated installation of terraform-docs is not available for Linux.  Please install terraform-docs manually"
    log_error "For more information please refer to https://github.com/terraform-docs/terraform-docs#installation"
    return 1
  fi
  # Check the latest available version of terraform-docs
  TERRAFORM_DOCS_VERSION=$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TERRAFORM_DOCS_VERSION} ]]; then
    log_error "Unable to determine the latest version of terraform-docs"
    return 1
  fi
  # Check if terraform-docs is already installed and if the current version matches the version to be set
  if command -v terraform-docs &> /dev/null; then
    if [[ "$(terraform-docs --version | sed -r 's/v([0-9]\.[0-9]+\.[0-9]+)/\1/')" == "${TERRAFORM_DOCS_VERSION}" ]]; then
      log_info "terraform-docs ${TERRAFORM_DOCS_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "terraform-docs is not installed or is not the correct version.  Installing terraform-docs v${TERRAFORM_DOCS_VERSION}"
  # Install terraform-docs using Go
  log_info "Installing terraform-docs using Go"
  # If the environment variable GO_VERSION is not set then call the get_go_version function to set it
  if [[ -z ${GO_VERSION} ]]; then
    get-go-version
  fi
  GO_MAJOR_VERSION=$(echo "${GO_VERSION}" | cut -d. -f1)
  GO_MINOR_VERSION=$(echo "${GO_VERSION}" | cut -d. -f2)
  # If the combined major and minor version of Go is less than or equal to 1.17 then use the old method of installing terraform-docs with go get and if it is greater than 1.17 then use the new method of installing terraform-docs with go install
  if [[ "${GO_MAJOR_VERSION}${GO_MINOR_VERSION}" -le 117 ]]; then
    go get github.com/terraform-docs/terraform-docs/cmd/terraform-docs@latest > /dev/null
  else
    go install github.com/terraform-docs/terraform-docs/cmd/terraform-docs@latest > /dev/null
  fi
  # If ${HOME}/go/bin is not in the PATH then add it by sourcing the .pathVars file
  if ! echo "${PATH}" | grep -q "${HOME}/go/bin"; then
    log_info "Adding ${HOME}/go/bin to PATH"
    source "${HOME}/.pathVars"
  fi
  # Check if the version installed is the correct version and if not report an error
  if [[ "$(terraform-docs --version | sed -r 's/v([0-9]\.[0-9]+\.[0-9]+)/\1/')" != "${TERRAFORM_DOCS_VERSION}" ]]; then
    log_error "Error installing terraform-docs v${TERRAFORM_DOCS_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "terraform-docs v${TERRAFORM_DOCS_VERSION} installed"
}

# Install terraform-docs for Mac
terraform-docs-install-mac () {
  # Referring to https://github.com/terraform-docs/terraform-docs#installation
  # Check the latest available version of terraform-docs
  TERRAFORM_DOCS_VERSION=$(curl -s https://api.github.com/repos/terraform-docs/terraform-docs/releases/latest | grep '"tag_name":' | sed -E 's/.+"v([^"]+)".+/\1/')
  # Check if the version is set and if not report an error
  if [[ -z ${TERRAFORM_DOCS_VERSION} ]]; then
    log_error "Unable to determine the latest version of terraform-docs"
    return 1
  fi
  # Check if terraform-docs is already installed and if the current version matches the version to be set
  if command -v terraform-docs &> /dev/null; then
    if [[ "$(terraform-docs --version | sed -r 's/v([0-9]\.[0-9]+\.[0-9]+)/\1/')" == "${TERRAFORM_DOCS_VERSION}" ]]; then
      log_info "terraform-docs ${TERRAFORM_DOCS_VERSION} is already installed and is the latest version"
      return 0
    fi
  fi
  log_info "terraform-docs is not installed or is not the correct version.  Installing terraform-docs v${TERRAFORM_DOCS_VERSION}"
  # Use Homebrew to install terraform-docs
  # Check if Homebrew is installed and if not report an error
  if ! command -v brew &> /dev/null; then
    log_error "Homebrew is not installed.  Please install Homebrew and try again"
    return 1
  fi
  # Check if terraform-docs is already installed, if not install it, if it is then upgrade it
  if command -v terraform-docs &> /dev/null; then
    log_info "Upgrading terraform-docs"
    brew upgrade terraform-docs
  else
    log_info "Installing terraform-docs"
    brew install terraform-docs
  fi
  # Check if terraform-docs is installed and if not report an error
  if ! command -v terraform-docs &> /dev/null; then
    log_error "Error installing terraform-docs"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  log_info "terraform-docs ${TERRAFORM_DOCS_VERSION} installed"
}