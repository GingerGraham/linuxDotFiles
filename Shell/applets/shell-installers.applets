#!/usr/bin/env bash

# Path: Shell/applets/shell-installers.applets
# Purpose: Install packages for common shells associated with this project, primarily zsh and bash
# Use: Run this script to install the necessary packages for zsh and bash

source_shrc () {
    # Get the current user
    if [ -n "$USER" ]; then
        local user="$USER"
    elif [ -n "$USERNAME" ]; then
        local user="$USERNAME"
    elif [ -n "$(whoami)" ]; then
        local user="$(whoami)"
    else
        log_error "Unable to determine the user"
        return 1
    fi
    log_debug "User is ${user}"
    # If the user is not found, return an error
    if [ -z "$user" ]; then
        log_error "Unable to determine the user"
        return 1
    fi
    # Get the user's default shell
    local shell=$(getent passwd "$user" | cut -d: -f7 | sed 's/\/bin\///')
    shell=${shell##*/}
    log_debug "Shell is ${shell}"
    # log_info "Sourcing ${HOME}/.${shell}rc"
    # shellcheck source=/dev/null
    # source "${HOME}/.${shell}rc" # Note; seems to not work but running the same command again on the command line works fine
    # If the last command failed, return an error
    # if [ $? -ne 0 ]; then
          # log_error "Unable to source ${HOME}/.${shell}rc"
    #     return 1
    # fi
    # log_info "Sourced ${HOME}/.${shell}rc"
    log_info "To apply the changes to the current shell, run the following command:"
    echo "source ${HOME}/.${shell}rc"
    return 0
}

install_zsh () {
  # Install zsh with syntax highlighting and autosuggestions
  detect_package_manager
  case "${PACKAGE_MANAGER}" in
    apt)
      sudo apt install -y zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    dnf)
      sudo dnf install -y zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    yum)
      sudo yum install -y zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    zypper)
      sudo zypper install -y zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    pacman)
      sudo pacman -S --noconfirm zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    brew)
      brew install zsh zsh-syntax-highlighting zsh-autosuggestions
      ;;
    *)
      log_error "No package manager found"
      return 1
      ;;
  esac
  # If the install failed, return an error
  if [[ $? -ne 0 ]]; then
    log_error "zsh install failed"
    return 1
  fi
  # Remind the user that they will need relink the .zshrc file that would have previously been symlinked when they run installDotFiles.sh
  log_info "You will need to relink the .zshrc file after installing zsh"
  log_info "Run the following command to relink the .zshrc file:"
  echo "./installDotFiles.sh -f .zshrc"
  # Set the default shell to zsh
  # If chsh is not available, the user will need to change their shell manually
  if command -v chsh &> /dev/null; then
    log_info "Changing default shell to zsh"
    chsh -s "$(which zsh)"
  else
    log_warn "chsh not available, you will need to change your shell manually"
  fi
  return 0
}

install_bash () {
  # Install bash with syntax highlighting
  detect_package_manager
  case "${PACKAGE_MANAGER}" in
    apt)
      sudo apt install -y bash bash-completion
      ;;
    dnf)
      sudo dnf install -y bash bash-completion
      ;;
    yum)
      sudo yum install -y bash bash-completion
      ;;
    zypper)
      sudo zypper install -y bash bash-completion
      ;;
    pacman)
      sudo pacman -S --noconfirm bash bash-completion
      ;;
    brew)
      brew install bash bash-completion
      ;;
    *)
      log_error "No package manager found"
      return 1
      ;;
  esac
  # If the install failed, return an error
  if [[ $? -ne 0 ]]; then
    log_error "bash install failed"
    return 1
  fi
  # Set the default shell to bash
  # If chsh is not available, the user will need to change their shell manually
  if command -v chsh &> /dev/null; then
    log_info "Changing default shell to bash"
    chsh -s "$(which bash)"
  else
    log_warn "chsh not available, you will need to change your shell manually"
  fi
}

install_omz () {
  # Install oh-my-zsh
  if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then
    log_info "Installing oh-my-zsh"
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  else
    log_info "oh-my-zsh already installed"
  fi
  # If the install failed, return an error
  if [[ $? -ne 0 ]]; then
    log_error "oh-my-zsh install failed"
    return 1
  fi
  # Source the .zshrc file
  source "${HOME}/.zshrc"
  return 0
}

install_omp () {
  # Test if the command oh-my-posh is installed
  if ! command -v oh-my-posh &> /dev/null; then
    log_info "Installing oh-my-posh"
    mkdir -p ~/bin
    curl -s https://ohmyposh.dev/install.sh | bash -s -- -d ~/bin
  else
    log_info "oh-my-posh already installed"
  fi
  # If the install failed, return an error
  if [[ $? -ne 0 ]]; then
    log_error "oh-my-posh install failed"
    return 1
  fi
  source_shrc
  return 0
}
