#!/usr/bin/env bash

# Path: .applets
# Purpose: Ansible focused applets for shell commands
# Use: Add applets to this file and they will be sourced by ~/.applets

# This script adds helper functions to the shell
# It is sourced by .bashrc or .zshrc via ~/.applets
# Define additional functions here

set_log_level INFO
set_log_format "[%l] %m"

ansible_install_dnf () {
  # Check if the command dnf is available and use it if so
  if command -v dnf &> /dev/null; then
    log_info "Installing Ansible using dnf"
    sudo dnf install -y ansible
  else
    log_error "dnf is not installed - required for Ansible install"
    return 1
  fi

  # If the install fails then exit
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    log_error "Ansible install failed"
    return 1
  fi
  log_info "Installed Ansible"
  return 0
}

ansible_install_yum () {
  # Check if the command yum is available and use it if so
  if command -v yum &> /dev/null; then
    log_info "Installing Ansible using yum"
    sudo yum install -y ansible
  else
    log_error "yum is not installed - required for Ansible install"
    return 1
  fi

  # If the install fails then exit
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    log_error "Ansible install failed"
    return 1
  fi
  log_info "Installed Ansible"
  return 0
}

ansible_install_zypper () {
  # Check if the command zypper is available and use it if so
  if command -v zypper &> /dev/null; then
    log_info "Installing Ansible using zypper"
    sudo zypper install -y ansible
  else
    log_error "zypper is not installed - required for Ansible install"
    return 1
  fi

  # If the install fails then exit
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    log_error "Ansible install failed"
    return 1
  fi
  log_info "Installed Ansible"
  return 0
}

ansible_install_pacman () {
  # Check if the command pacman is available and use it if so
  if command -v pacman &> /dev/null; then
    log_info "Installing Ansible using pacman"
    sudo pacman -S --noconfirm ansible
  else
    log_error "pacman is not installed - required for Ansible install"
    return 1
  fi

  # If the install fails then exit
  if [[ $? -ne 0 ]]; then
    log_error "Ansible install failed"
    return 1
  fi
  log_info "Installed Ansible"
  return 0
}

ansible_add_ppa () {
  # Check if the command apt-add-repository is available and use it if so
  if command -v apt-add-repository &> /dev/null; then
    log_info "Adding Ansible PPA"
    sudo apt update
    if ! dpkg -l | grep -q software-properties-common; then
      log_info "Installing software-properties-common"
      sudo apt install -y software-properties-common
    else
      log_info "software-properties-common is already installed"
    fi
    sudo apt-add-repository -y ppa:ansible/ansible
  else
    log_error "apt-add-repository is not installed - required for Ansible PPA add"
    return 1
  fi

  # If the add fails then exit
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then
    log_error "Ansible PPA add failed"
    return 1
  fi
  log_info "Added Ansible PPA"
  return 0
}

# Install ansible using pip3 after confirming that the latest version is not already installed
ansible_install_python () {
  # Check the latest available version of Ansible by grepping the "version" field from the JSON output of the PyPi API
  PYPI_ANSIBLE_VERSION=$(curl -s https://pypi.org/pypi/ansible/json | grep -Eo '"version":"[0-9]+\.[0-9]+\.[0-9]+",' | sed -E 's/.+"([0-9]+\.[0-9]+\.[0-9]+)",/\1/')
  # PYPI_ANSIBLE_CORE=$(curl -s https://pypi.org/pypi/ansible/json | grep -Eo '\[\"ansible-core.*\"],' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
  PYPI_ANSIBLE_CORE=$(curl -s https://pypi.org/pypi/ansible/json | grep -Eo '\["ansible-core.*"],' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
  # Check if the version is set and if not report an error
  if [[ -z ${PYPI_ANSIBLE_VERSION} ]]; then
    log_error "Unable to determine the latest version of Ansible"
    return 1
  fi
  # Test if pip3 is installed and if not report an error
  if ! command -v pip3 &> /dev/null; then
    log_error "pip3 is not installed"
    log_info "Please install pip3 and try again"
    # Give an example of how to install pip3 using python3
    log_info "Example: python3 -m ensurepip --default-pip"    
    log_info "Confirm details with your specific distro, package manager of by referring to https://pip.pypa.io/en/stable/installation/"
    return 1
  fi
  # Using pip check if Ansible is already installed using pip and if the current version matches the version to be set
  if pip3 list --disable-pip-version-check | grep ansible &> /dev/null; then
    if [[ "$(pip3 list --disable-pip-version-check | grep -E 'ansible\s+' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')" == "${PYPI_ANSIBLE_VERSION}" ]]; then
      log_info "Ansible ${PYPI_ANSIBLE_VERSION} with core version ${PYPI_ANSIBLE_CORE} is already installed and is the latest version"
      return 0
    fi
  fi
  # Check if ansible is already instaleld using another method, such as apt or dnf package managers and check the version.  If the ansible core versions macth then report and exit
  if command -v ansible &> /dev/null; then
    ANSIBLE_VERSION=$(ansible --version | grep -Eo 'core\s+[0-9]+\.[0-9]+\.[0-9]+' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
    if [[ "${ANSIBLE_VERSION}" == "${PYPI_ANSIBLE_CORE}" ]]; then
      log_info "Ansible core version ${ANSIBLE_VERSION} is already installed using a method other than pip and is the latest version"
      return 0
    fi
  fi
  log_info "Ansible is not installed or is not the correct version.  Installing Ansible v${PYPI_ANSIBLE_VERSION} from PyPi with core version ${PYPI_ANSIBLE_CORE}"
  # Install Ansible using pip3
  pip3 install --upgrade ansible --disable-pip-version-check
  # Check if the version installed is the correct version and if not report an error
  if [[ "$(pip3 list --disable-pip-version-check | grep -E 'ansible\s+' | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')" != "${PYPI_ANSIBLE_VERSION}" ]]; then
    log_error "Error installing Ansible v${PYPI_ANSIBLE_VERSION}"
    log_error "Please check the version is valid and try again"
    return 1
  fi
  # Extract the version of Ansible installed and report it
  log_info "Ansible core ${PYPI_ANSIBLE_CORE} installed from PyPi Ansible v${PYPI_ANSIBLE_VERSION} using pip3"
}

# Use ansible-vault to decrypt a list of file
avd () {
  # Check if variables are already set and if so unset -f
  if [[ -v VAULT_PASS ]]; then
    VAULT_PASS=""
  fi
  if [[ -v FILES ]]; then
    FILES=()
  fi
  # Check if ansible is installed
  if ! command -v ansible &> /dev/null
  then
      log_error "Ansible could not be found"
      return 1
  fi
  # Use getopts to parse the arguments
  while getopts ":p:" opt; do
    case $opt in
      p) VAULT_PASS="$OPTARG"
         log_info "Pass file is ${VAULT_PASS}" >&2
      ;;
      \?) log_error "Invalid option -$OPTARG" >&2
          return 1
      ;;
    esac
  done

  # Process arguments excluding arguments passed as options
  shift $((OPTIND -1))
  echo "[INFO] Processing ${*}"
  # If argument in $@ is not a switch or existing variable add it to an array of file names
  for arg in "${@}"; do
    if [[ ! $arg =~ ^-.* ]] || [[ ! -v $arg ]]; then
      # echo "adding $arg to FILES"
      FILES+=("$arg")
    fi
  done

  # If FILES is empty then report an error and return
  if [[ -z ${FILES[*]} ]]; then
    log_error "No files to decrypt"
    return 1
  fi

  # Test if ansible.cfg exists and if vault_password_file is set, then test if the value for vault_password_file exists in the current directory.  If it does run ansible-vault decrypt without using the VAULT_PASS or prompting for a password
  if [[ -f "ansible.cfg" ]]; then
    if grep -q "vault_password_file" "ansible.cfg"; then
      if [[ -f "$(grep "vault_password_file" "ansible.cfg" | cut -d'=' -f2 | tr -d ' ')" ]]; then
        log_info "Decrypting ${FILES[*]} with password file: $(grep "vault_password_file" "ansible.cfg" | cut -d'=' -f2 | tr -d ' ')"
        for file in "${FILES[@]}"; do
          log_debug "ansible-vault decrypt ${file}"
          ansible-vault decrypt "${file}"
        done
        return 0
      fi
    fi
  fi

  # Check if the vault password file exists
  if [[ ! -f "${VAULT_PASS}" ]]; then
    log_warn "Vault password file does not exist"
    # Remove VAULT_PASS from the environment
    VAULT_PASS=""
  fi

  if [[ ! -z "${VAULT_PASS}" ]]; then
    log_info "Decrypting ${FILES[*]} with password file: ${VAULT_PASS}"
    for file in "${FILES[@]}"; do
      ansible-vault decrypt --vault-password-file "${VAULT_PASS}" "${file}"
    done
  else
    log_info "Prompting for password to decrypt ${FILES[*]}"
    for file in "${FILES[@]}"; do
      ansible-vault decrypt "${file}"
    done
  fi

  # Remove all variables
  FILES=()
  VAULT_PASS=""
}

# Use ansible-vault to encrypt a list of file
ave () {
  # Check if variables are already set and if so unset -f
  if [[ -v VAULT_PASS ]]; then
    VAULT_PASS=""
  fi
  if [[ -v FILES ]]; then
    FILES=()
  fi
  # Check if ansible is installed
  if ! command -v ansible &> /dev/null
  then
      log_error "Ansible could not be found"
      return 1
  fi
  # Use getopts to parse the arguments
  while getopts ":p:" opt; do
    case $opt in
      p) VAULT_PASS="$OPTARG"
         log_info "Pass file is ${VAULT_PASS}" >&2
      ;;
      \?) log_error "Invalid option -$OPTARG" >&2
          return 1
      ;;
    esac
  done

  # Process arguments excluding arguments passed as options
  shift $((OPTIND -1))
  echo "[INFO] Processing ${*}"
  # If argument in $@ is not a switch or existing variable add it to an array of file names
  for arg in "${@}"; do
    if [[ ! $arg =~ ^-.* ]] || [[ ! -v $arg ]]; then
      log_info "adding $arg to FILES"
      FILES+=("$arg")
    fi
  done

  # If FILES is empty then report an error and return
  if [[ -z ${FILES[*]} ]]; then
    log_error "No files to encrypt"
    return 1
  fi

  # Test if ansible.cfg exists and if vault_password_file is set, then test if the value for vault_password_file exists in the current directory.  If it does run ansible-vault encrypt without using the VAULT_PASS or prompting for a password
  if [[ -f "ansible.cfg" ]]; then
    if grep -q "vault_password_file" "ansible.cfg"; then
      if [[ -f "$(grep "vault_password_file" "ansible.cfg" | cut -d'=' -f2 | tr -d ' ')" ]]; then
        log_info "Encrypting ${FILES[*]} with password file: $(grep "vault_password_file" "ansible.cfg" | cut -d'=' -f2 | tr -d ' ')"
        for file in "${FILES[@]}"; do
          log_debug "ansible-vault encrypt ${file}"
          ansible-vault encrypt "${file}"
        done
        return 0
      fi
    fi
  fi

  # Check if the vault password file exists
  if [[ ! -f "${VAULT_PASS}" ]]; then
    log_warn "Vault password file does not exist"
    # Remove VAULT_PASS from the environment
    VAULT_PASS=""
  fi

  if [[ ! -z "${VAULT_PASS}" ]]; then
    log_info "Encrypting ${FILES[*]} with password file: ${VAULT_PASS}"
    for file in "${FILES[@]}"; do
      ansible-vault encrypt --vault-password-file "${VAULT_PASS}" "${file}"
    done
  else
    log_info "Prompting for password to encrypt ${FILES[*]}"
    for file in "${FILES[@]}"; do
      ansible-vault encrypt "${file}"
    done
  fi

  # Remove all variables
  FILES=()
  VAULT_PASS=""
}

set_log_format "%d [%l] [%s] %m"
